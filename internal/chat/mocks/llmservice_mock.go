// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	goai "github.com/shaharia-lab/goai"
	mock "github.com/stretchr/testify/mock"
)

// MockLLMService is an autogenerated mock type for the LLMService type
type MockLLMService struct {
	mock.Mock
}

type MockLLMService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLLMService) EXPECT() *MockLLMService_Expecter {
	return &MockLLMService_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: ctx, messages
func (_m *MockLLMService) Generate(ctx context.Context, messages []goai.LLMMessage) (goai.LLMResponse, error) {
	ret := _m.Called(ctx, messages)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 goai.LLMResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []goai.LLMMessage) (goai.LLMResponse, error)); ok {
		return rf(ctx, messages)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []goai.LLMMessage) goai.LLMResponse); ok {
		r0 = rf(ctx, messages)
	} else {
		r0 = ret.Get(0).(goai.LLMResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []goai.LLMMessage) error); ok {
		r1 = rf(ctx, messages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMService_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockLLMService_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - messages []goai.LLMMessage
func (_e *MockLLMService_Expecter) Generate(ctx interface{}, messages interface{}) *MockLLMService_Generate_Call {
	return &MockLLMService_Generate_Call{Call: _e.mock.On("Generate", ctx, messages)}
}

func (_c *MockLLMService_Generate_Call) Run(run func(ctx context.Context, messages []goai.LLMMessage)) *MockLLMService_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]goai.LLMMessage))
	})
	return _c
}

func (_c *MockLLMService_Generate_Call) Return(_a0 goai.LLMResponse, _a1 error) *MockLLMService_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMService_Generate_Call) RunAndReturn(run func(context.Context, []goai.LLMMessage) (goai.LLMResponse, error)) *MockLLMService_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateStream provides a mock function with given fields: ctx, messages
func (_m *MockLLMService) GenerateStream(ctx context.Context, messages []goai.LLMMessage) (<-chan goai.StreamingLLMResponse, error) {
	ret := _m.Called(ctx, messages)

	if len(ret) == 0 {
		panic("no return value specified for GenerateStream")
	}

	var r0 <-chan goai.StreamingLLMResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []goai.LLMMessage) (<-chan goai.StreamingLLMResponse, error)); ok {
		return rf(ctx, messages)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []goai.LLMMessage) <-chan goai.StreamingLLMResponse); ok {
		r0 = rf(ctx, messages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan goai.StreamingLLMResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []goai.LLMMessage) error); ok {
		r1 = rf(ctx, messages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMService_GenerateStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateStream'
type MockLLMService_GenerateStream_Call struct {
	*mock.Call
}

// GenerateStream is a helper method to define mock.On call
//   - ctx context.Context
//   - messages []goai.LLMMessage
func (_e *MockLLMService_Expecter) GenerateStream(ctx interface{}, messages interface{}) *MockLLMService_GenerateStream_Call {
	return &MockLLMService_GenerateStream_Call{Call: _e.mock.On("GenerateStream", ctx, messages)}
}

func (_c *MockLLMService_GenerateStream_Call) Run(run func(ctx context.Context, messages []goai.LLMMessage)) *MockLLMService_GenerateStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]goai.LLMMessage))
	})
	return _c
}

func (_c *MockLLMService_GenerateStream_Call) Return(_a0 <-chan goai.StreamingLLMResponse, _a1 error) *MockLLMService_GenerateStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMService_GenerateStream_Call) RunAndReturn(run func(context.Context, []goai.LLMMessage) (<-chan goai.StreamingLLMResponse, error)) *MockLLMService_GenerateStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLLMService creates a new instance of MockLLMService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLLMService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLLMService {
	mock := &MockLLMService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
