// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	goai "github.com/shaharia-lab/goai"
	mock "github.com/stretchr/testify/mock"

	types "github.com/shaharia-lab/echoy/internal/chat/types"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Chat provides a mock function with given fields: ctx, sessionID, message
func (_m *MockService) Chat(ctx context.Context, sessionID uuid.UUID, message string) (types.ChatResponse, error) {
	ret := _m.Called(ctx, sessionID, message)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 types.ChatResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (types.ChatResponse, error)); ok {
		return rf(ctx, sessionID, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) types.ChatResponse); ok {
		r0 = rf(ctx, sessionID, message)
	} else {
		r0 = ret.Get(0).(types.ChatResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, sessionID, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Chat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chat'
type MockService_Chat_Call struct {
	*mock.Call
}

// Chat is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
//   - message string
func (_e *MockService_Expecter) Chat(ctx interface{}, sessionID interface{}, message interface{}) *MockService_Chat_Call {
	return &MockService_Chat_Call{Call: _e.mock.On("Chat", ctx, sessionID, message)}
}

func (_c *MockService_Chat_Call) Run(run func(ctx context.Context, sessionID uuid.UUID, message string)) *MockService_Chat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockService_Chat_Call) Return(_a0 types.ChatResponse, _a1 error) *MockService_Chat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Chat_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (types.ChatResponse, error)) *MockService_Chat_Call {
	_c.Call.Return(run)
	return _c
}

// ChatStreaming provides a mock function with given fields: ctx, sessionID, message
func (_m *MockService) ChatStreaming(ctx context.Context, sessionID uuid.UUID, message string) (<-chan goai.StreamingLLMResponse, error) {
	ret := _m.Called(ctx, sessionID, message)

	if len(ret) == 0 {
		panic("no return value specified for ChatStreaming")
	}

	var r0 <-chan goai.StreamingLLMResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (<-chan goai.StreamingLLMResponse, error)); ok {
		return rf(ctx, sessionID, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) <-chan goai.StreamingLLMResponse); ok {
		r0 = rf(ctx, sessionID, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan goai.StreamingLLMResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, sessionID, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ChatStreaming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatStreaming'
type MockService_ChatStreaming_Call struct {
	*mock.Call
}

// ChatStreaming is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
//   - message string
func (_e *MockService_Expecter) ChatStreaming(ctx interface{}, sessionID interface{}, message interface{}) *MockService_ChatStreaming_Call {
	return &MockService_ChatStreaming_Call{Call: _e.mock.On("ChatStreaming", ctx, sessionID, message)}
}

func (_c *MockService_ChatStreaming_Call) Run(run func(ctx context.Context, sessionID uuid.UUID, message string)) *MockService_ChatStreaming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockService_ChatStreaming_Call) Return(_a0 <-chan goai.StreamingLLMResponse, _a1 error) *MockService_ChatStreaming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ChatStreaming_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (<-chan goai.StreamingLLMResponse, error)) *MockService_ChatStreaming_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatHistory provides a mock function with given fields: ctx, chatUUID
func (_m *MockService) GetChatHistory(ctx context.Context, chatUUID uuid.UUID) (*goai.ChatHistory, error) {
	ret := _m.Called(ctx, chatUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatHistory")
	}

	var r0 *goai.ChatHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*goai.ChatHistory, error)); ok {
		return rf(ctx, chatUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *goai.ChatHistory); ok {
		r0 = rf(ctx, chatUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goai.ChatHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, chatUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetChatHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatHistory'
type MockService_GetChatHistory_Call struct {
	*mock.Call
}

// GetChatHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - chatUUID uuid.UUID
func (_e *MockService_Expecter) GetChatHistory(ctx interface{}, chatUUID interface{}) *MockService_GetChatHistory_Call {
	return &MockService_GetChatHistory_Call{Call: _e.mock.On("GetChatHistory", ctx, chatUUID)}
}

func (_c *MockService_GetChatHistory_Call) Run(run func(ctx context.Context, chatUUID uuid.UUID)) *MockService_GetChatHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_GetChatHistory_Call) Return(_a0 *goai.ChatHistory, _a1 error) *MockService_GetChatHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetChatHistory_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*goai.ChatHistory, error)) *MockService_GetChatHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetListChatHistories provides a mock function with given fields: ctx
func (_m *MockService) GetListChatHistories(ctx context.Context) (types.ChatHistoryList, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListChatHistories")
	}

	var r0 types.ChatHistoryList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.ChatHistoryList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.ChatHistoryList); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.ChatHistoryList)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetListChatHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListChatHistories'
type MockService_GetListChatHistories_Call struct {
	*mock.Call
}

// GetListChatHistories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetListChatHistories(ctx interface{}) *MockService_GetListChatHistories_Call {
	return &MockService_GetListChatHistories_Call{Call: _e.mock.On("GetListChatHistories", ctx)}
}

func (_c *MockService_GetListChatHistories_Call) Run(run func(ctx context.Context)) *MockService_GetListChatHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_GetListChatHistories_Call) Return(_a0 types.ChatHistoryList, _a1 error) *MockService_GetListChatHistories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetListChatHistories_Call) RunAndReturn(run func(context.Context) (types.ChatHistoryList, error)) *MockService_GetListChatHistories_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
