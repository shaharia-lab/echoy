// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	goai "github.com/shaharia-lab/goai"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockHistoryService is an autogenerated mock type for the HistoryService type
type MockHistoryService struct {
	mock.Mock
}

type MockHistoryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHistoryService) EXPECT() *MockHistoryService_Expecter {
	return &MockHistoryService_Expecter{mock: &_m.Mock}
}

// AddMessage provides a mock function with given fields: ctx, _a1, message
func (_m *MockHistoryService) AddMessage(ctx context.Context, _a1 uuid.UUID, message goai.ChatHistoryMessage) error {
	ret := _m.Called(ctx, _a1, message)

	if len(ret) == 0 {
		panic("no return value specified for AddMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, goai.ChatHistoryMessage) error); ok {
		r0 = rf(ctx, _a1, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHistoryService_AddMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMessage'
type MockHistoryService_AddMessage_Call struct {
	*mock.Call
}

// AddMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 uuid.UUID
//   - message goai.ChatHistoryMessage
func (_e *MockHistoryService_Expecter) AddMessage(ctx interface{}, _a1 interface{}, message interface{}) *MockHistoryService_AddMessage_Call {
	return &MockHistoryService_AddMessage_Call{Call: _e.mock.On("AddMessage", ctx, _a1, message)}
}

func (_c *MockHistoryService_AddMessage_Call) Run(run func(ctx context.Context, _a1 uuid.UUID, message goai.ChatHistoryMessage)) *MockHistoryService_AddMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(goai.ChatHistoryMessage))
	})
	return _c
}

func (_c *MockHistoryService_AddMessage_Call) Return(_a0 error) *MockHistoryService_AddMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHistoryService_AddMessage_Call) RunAndReturn(run func(context.Context, uuid.UUID, goai.ChatHistoryMessage) error) *MockHistoryService_AddMessage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChat provides a mock function with given fields: ctx
func (_m *MockHistoryService) CreateChat(ctx context.Context) (*goai.ChatHistory, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 *goai.ChatHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*goai.ChatHistory, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *goai.ChatHistory); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goai.ChatHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHistoryService_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type MockHistoryService_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHistoryService_Expecter) CreateChat(ctx interface{}) *MockHistoryService_CreateChat_Call {
	return &MockHistoryService_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx)}
}

func (_c *MockHistoryService_CreateChat_Call) Run(run func(ctx context.Context)) *MockHistoryService_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockHistoryService_CreateChat_Call) Return(_a0 *goai.ChatHistory, _a1 error) *MockHistoryService_CreateChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHistoryService_CreateChat_Call) RunAndReturn(run func(context.Context) (*goai.ChatHistory, error)) *MockHistoryService_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetChat provides a mock function with given fields: ctx, _a1
func (_m *MockHistoryService) GetChat(ctx context.Context, _a1 uuid.UUID) (*goai.ChatHistory, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetChat")
	}

	var r0 *goai.ChatHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*goai.ChatHistory, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *goai.ChatHistory); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goai.ChatHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHistoryService_GetChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChat'
type MockHistoryService_GetChat_Call struct {
	*mock.Call
}

// GetChat is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 uuid.UUID
func (_e *MockHistoryService_Expecter) GetChat(ctx interface{}, _a1 interface{}) *MockHistoryService_GetChat_Call {
	return &MockHistoryService_GetChat_Call{Call: _e.mock.On("GetChat", ctx, _a1)}
}

func (_c *MockHistoryService_GetChat_Call) Run(run func(ctx context.Context, _a1 uuid.UUID)) *MockHistoryService_GetChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockHistoryService_GetChat_Call) Return(_a0 *goai.ChatHistory, _a1 error) *MockHistoryService_GetChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHistoryService_GetChat_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*goai.ChatHistory, error)) *MockHistoryService_GetChat_Call {
	_c.Call.Return(run)
	return _c
}

// ListChatHistories provides a mock function with given fields: ctx
func (_m *MockHistoryService) ListChatHistories(ctx context.Context) ([]goai.ChatHistory, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListChatHistories")
	}

	var r0 []goai.ChatHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]goai.ChatHistory, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []goai.ChatHistory); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goai.ChatHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHistoryService_ListChatHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChatHistories'
type MockHistoryService_ListChatHistories_Call struct {
	*mock.Call
}

// ListChatHistories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHistoryService_Expecter) ListChatHistories(ctx interface{}) *MockHistoryService_ListChatHistories_Call {
	return &MockHistoryService_ListChatHistories_Call{Call: _e.mock.On("ListChatHistories", ctx)}
}

func (_c *MockHistoryService_ListChatHistories_Call) Run(run func(ctx context.Context)) *MockHistoryService_ListChatHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockHistoryService_ListChatHistories_Call) Return(_a0 []goai.ChatHistory, _a1 error) *MockHistoryService_ListChatHistories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHistoryService_ListChatHistories_Call) RunAndReturn(run func(context.Context) ([]goai.ChatHistory, error)) *MockHistoryService_ListChatHistories_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHistoryService creates a new instance of MockHistoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHistoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHistoryService {
	mock := &MockHistoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
