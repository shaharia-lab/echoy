// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	config "github.com/shaharia-lab/echoy/internal/config"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigManager is an autogenerated mock type for the ConfigManager type
type MockConfigManager struct {
	mock.Mock
}

type MockConfigManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigManager) EXPECT() *MockConfigManager_Expecter {
	return &MockConfigManager_Expecter{mock: &_m.Mock}
}

// ConfigExists provides a mock function with no fields
func (_m *MockConfigManager) ConfigExists() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfigExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConfigManager_ConfigExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigExists'
type MockConfigManager_ConfigExists_Call struct {
	*mock.Call
}

// ConfigExists is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter) ConfigExists() *MockConfigManager_ConfigExists_Call {
	return &MockConfigManager_ConfigExists_Call{Call: _e.mock.On("ConfigExists")}
}

func (_c *MockConfigManager_ConfigExists_Call) Run(run func()) *MockConfigManager_ConfigExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_ConfigExists_Call) Return(_a0 bool) *MockConfigManager_ConfigExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigManager_ConfigExists_Call) RunAndReturn(run func() bool) *MockConfigManager_ConfigExists_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function with no fields
func (_m *MockConfigManager) LoadConfig() (config.Config, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 config.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (config.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigManager_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockConfigManager_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *MockConfigManager_Expecter) LoadConfig() *MockConfigManager_LoadConfig_Call {
	return &MockConfigManager_LoadConfig_Call{Call: _e.mock.On("LoadConfig")}
}

func (_c *MockConfigManager_LoadConfig_Call) Run(run func()) *MockConfigManager_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigManager_LoadConfig_Call) Return(_a0 config.Config, _a1 error) *MockConfigManager_LoadConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigManager_LoadConfig_Call) RunAndReturn(run func() (config.Config, error)) *MockConfigManager_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SaveConfig provides a mock function with given fields: _a0
func (_m *MockConfigManager) SaveConfig(_a0 config.Config) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for saveConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(config.Config) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigManager_SaveConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'saveConfig'
type MockConfigManager_SaveConfig_Call struct {
	*mock.Call
}

// SaveConfig is a helper method to define mock.On call
//   - _a0 config.Config
func (_e *MockConfigManager_Expecter) SaveConfig(_a0 interface{}) *MockConfigManager_SaveConfig_Call {
	return &MockConfigManager_SaveConfig_Call{Call: _e.mock.On("saveConfig", _a0)}
}

func (_c *MockConfigManager_SaveConfig_Call) Run(run func(_a0 config.Config)) *MockConfigManager_SaveConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.Config))
	})
	return _c
}

func (_c *MockConfigManager_SaveConfig_Call) Return(_a0 error) *MockConfigManager_SaveConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigManager_SaveConfig_Call) RunAndReturn(run func(config.Config) error) *MockConfigManager_SaveConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigManager creates a new instance of MockConfigManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigManager {
	mock := &MockConfigManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
