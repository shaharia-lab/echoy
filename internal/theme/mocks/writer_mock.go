// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockWriter is an autogenerated mock type for the Writer type
type MockWriter struct {
	mock.Mock
}

type MockWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWriter) EXPECT() *MockWriter_Expecter {
	return &MockWriter_Expecter{mock: &_m.Mock}
}

// Print provides a mock function with given fields: a
func (_m *MockWriter) Print(a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// MockWriter_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type MockWriter_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - a ...interface{}
func (_e *MockWriter_Expecter) Print(a ...interface{}) *MockWriter_Print_Call {
	return &MockWriter_Print_Call{Call: _e.mock.On("Print",
		append([]interface{}{}, a...)...)}
}

func (_c *MockWriter_Print_Call) Run(run func(a ...interface{})) *MockWriter_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockWriter_Print_Call) Return() *MockWriter_Print_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWriter_Print_Call) RunAndReturn(run func(...interface{})) *MockWriter_Print_Call {
	_c.Run(run)
	return _c
}

// Printf provides a mock function with given fields: format, a
func (_m *MockWriter) Printf(format string, a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// MockWriter_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type MockWriter_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format string
//   - a ...interface{}
func (_e *MockWriter_Expecter) Printf(format interface{}, a ...interface{}) *MockWriter_Printf_Call {
	return &MockWriter_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, a...)...)}
}

func (_c *MockWriter_Printf_Call) Run(run func(format string, a ...interface{})) *MockWriter_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockWriter_Printf_Call) Return() *MockWriter_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWriter_Printf_Call) RunAndReturn(run func(string, ...interface{})) *MockWriter_Printf_Call {
	_c.Run(run)
	return _c
}

// Println provides a mock function with given fields: a
func (_m *MockWriter) Println(a ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, a...)
	_m.Called(_ca...)
}

// MockWriter_Println_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Println'
type MockWriter_Println_Call struct {
	*mock.Call
}

// Println is a helper method to define mock.On call
//   - a ...interface{}
func (_e *MockWriter_Expecter) Println(a ...interface{}) *MockWriter_Println_Call {
	return &MockWriter_Println_Call{Call: _e.mock.On("Println",
		append([]interface{}{}, a...)...)}
}

func (_c *MockWriter_Println_Call) Run(run func(a ...interface{})) *MockWriter_Println_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockWriter_Println_Call) Return() *MockWriter_Println_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWriter_Println_Call) RunAndReturn(run func(...interface{})) *MockWriter_Println_Call {
	_c.Run(run)
	return _c
}

// NewMockWriter creates a new instance of MockWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWriter {
	mock := &MockWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
