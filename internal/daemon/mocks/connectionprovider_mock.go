// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// MockConnectionProvider is an autogenerated mock type for the ConnectionProvider type
type MockConnectionProvider struct {
	mock.Mock
}

type MockConnectionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionProvider) EXPECT() *MockConnectionProvider_Expecter {
	return &MockConnectionProvider_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *MockConnectionProvider) Connect(ctx context.Context) (net.Conn, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (net.Conn, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) net.Conn); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionProvider_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockConnectionProvider_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnectionProvider_Expecter) Connect(ctx interface{}) *MockConnectionProvider_Connect_Call {
	return &MockConnectionProvider_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *MockConnectionProvider_Connect_Call) Run(run func(ctx context.Context)) *MockConnectionProvider_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnectionProvider_Connect_Call) Return(_a0 net.Conn, _a1 error) *MockConnectionProvider_Connect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionProvider_Connect_Call) RunAndReturn(run func(context.Context) (net.Conn, error)) *MockConnectionProvider_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionProvider creates a new instance of MockConnectionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionProvider {
	mock := &MockConnectionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
